From d76be2b01e920230d06a405529fbc9e79908d8c8 Mon Sep 17 00:00:00 2001
From: Lorenzo Pirritano <lpirritano@anaconda.com>
Date: Sun, 4 Aug 2024 15:00:26 +0200
Subject: [PATCH] fix test cmake config

---
 tests/test_cmake_config.py | 88 ++++++++++++++++++++++++++++++++------
 1 file changed, 76 insertions(+), 12 deletions(-)

diff --git a/tests/test_cmake_config.py b/tests/test_cmake_config.py
index ddc170a..7df0eaa 100644
--- a/tests/test_cmake_config.py
+++ b/tests/test_cmake_config.py
@@ -2,6 +2,7 @@ from __future__ import annotations
 
 import os
 import shutil
+import sysconfig
 from pathlib import Path
 from typing import TYPE_CHECKING
 
@@ -15,14 +16,49 @@ from scikit_build_core.errors import CMakeNotFoundError
 if TYPE_CHECKING:
     from collections.abc import Generator
 
+    from _pytest.mark.structures import ParameterSet
+
 DIR = Path(__file__).parent.resolve()
 
 
-def configure_args(config: CMaker, *, init: bool = False) -> Generator[str, None, None]:
+def get_cmake_configure_test_parameters() -> tuple[tuple[str, str], list[ParameterSet]]:
+    win_marks = []
+    linux_or_darwin_marks = []
+    if sysconfig.get_platform().startswith("win"):
+        linux_or_darwin_marks = [pytest.mark.skip(reason="run only on Linux/Darwin")]
+    else:
+        win_marks = [pytest.mark.skip(reason="run only on Windows")]
+    return ("generator", "single_config"), [
+        # windows
+        pytest.param(None, False, marks=win_marks, id="only_win_round"),
+        pytest.param("Ninja", True, marks=win_marks, id="win_ninja_round"),
+        pytest.param("Makefiles", True, marks=win_marks, id="win_makefiles_round"),
+        pytest.param("Others", False, marks=win_marks, id="win_others_round"),
+        # linux or darwin
+        pytest.param(None, True, marks=linux_or_darwin_marks, id="only_linux_round"),
+        pytest.param(
+            "Ninja", True, marks=linux_or_darwin_marks, id="linux_ninja_round"
+        ),
+    ]
+
+
+def configure_cmake_configure_test(
+    generator: str | None,
+    monkeypatch: pytest.MonkeyPatch,
+) -> None:
+    if generator is None:
+        monkeypatch.delenv("CMAKE_GENERATOR", raising=False)
+    else:
+        monkeypatch.setenv("CMAKE_GENERATOR", generator)
+
+
+def configure_args(
+    config: CMaker, *, init: bool = False, single_config: bool = False
+) -> Generator[str, None, None]:
     yield f"-S{config.source_dir}"
     yield f"-B{config.build_dir}"
 
-    if config.single_config:
+    if single_config:
         yield f"-DCMAKE_BUILD_TYPE:STRING={config.build_type}"
 
     if init:
@@ -31,7 +67,14 @@ def configure_args(config: CMaker, *, init: bool = False) -> Generator[str, None
 
 
 @pytest.mark.configure()
-def test_init_cache(fp, tmp_path):
+@pytest.mark.parametrize(*get_cmake_configure_test_parameters())
+def test_init_cache(
+    generator: str,
+    single_config: bool,
+    tmp_path: Path,
+    monkeypatch: pytest.MonkeyPatch,
+    fp,
+):
     fp.register(
         [fp.program("cmake"), "-E", "capabilities"],
         stdout='{"version":{"string":"3.14.0"}}',
@@ -41,9 +84,11 @@ def test_init_cache(fp, tmp_path):
         stdout='{"version":{"string":"3.14.0"}}',
     )
 
+    configure_cmake_configure_test(generator, monkeypatch)
+
     config = CMaker(
         CMake.default_search(),
-        source_dir=DIR / "packages/simple_pure",
+        source_dir=DIR / "packages" / "simple_pure",
         build_dir=tmp_path / "build",
         build_type="Release",
     )
@@ -51,7 +96,7 @@ def test_init_cache(fp, tmp_path):
         {"SKBUILD": True, "SKBUILD_VERSION": "1.0.0", "SKBUILD_PATH": config.source_dir}
     )
 
-    cmd = list(configure_args(config, init=True))
+    cmd = list(configure_args(config, init=True, single_config=single_config))
     print("Registering: cmake", *cmd)
     fp.register([fp.program("cmake"), *cmd])
     fp.register([fp.program("cmake3"), *cmd])
@@ -87,7 +132,14 @@ def test_too_old(fp, monkeypatch):
 
 
 @pytest.mark.configure()
-def test_cmake_args(tmp_path, fp):
+@pytest.mark.parametrize(*get_cmake_configure_test_parameters())
+def test_cmake_args(
+    generator: str,
+    single_config: bool,
+    tmp_path: Path,
+    monkeypatch: pytest.MonkeyPatch,
+    fp,
+):
     fp.register(
         [fp.program("cmake"), "-E", "capabilities"],
         stdout='{"version":{"string":"3.15.0"}}',
@@ -97,26 +149,36 @@ def test_cmake_args(tmp_path, fp):
         stdout='{"version":{"string":"3.15.0"}}',
     )
 
+    configure_cmake_configure_test(generator, monkeypatch)
+
     config = CMaker(
         CMake.default_search(),
-        source_dir=DIR / "packages/simple_pure",
+        source_dir=DIR / "packages" / "simple_pure",
         build_dir=tmp_path / "build",
         build_type="Release",
     )
 
-    cmd = list(configure_args(config))
+    cmd = list(configure_args(config, single_config=single_config))
     cmd.append("-DSOMETHING=one")
     print("Registering: cmake", *cmd)
     fp.register([fp.program("cmake"), *cmd])
     fp.register([fp.program("cmake3"), *cmd])
 
     config.configure(cmake_args=["-DSOMETHING=one"])
-
+    # config.configure might mutate config.single_config
+    assert config.single_config == single_config
     assert len(fp.calls) == 2
 
 
 @pytest.mark.configure()
-def test_cmake_paths(tmp_path, fp):
+@pytest.mark.parametrize(*get_cmake_configure_test_parameters())
+def test_cmake_paths(
+    generator: str,
+    single_config: bool,
+    tmp_path: Path,
+    monkeypatch: pytest.MonkeyPatch,
+    fp,
+):
     fp.register(
         [fp.program("cmake"), "-E", "capabilities"],
         stdout='{"version":{"string":"3.15.0"}}',
@@ -126,16 +188,18 @@ def test_cmake_paths(tmp_path, fp):
         stdout='{"version":{"string":"3.15.0"}}',
     )
 
+    configure_cmake_configure_test(generator, monkeypatch)
+
     config = CMaker(
         CMake.default_search(),
-        source_dir=DIR / "packages/simple_pure",
+        source_dir=DIR / "packages" / "simple_pure",
         build_dir=tmp_path / "build",
         build_type="Release",
         prefix_dirs=[tmp_path / "prefix"],
         module_dirs=[tmp_path / "module"],
     )
 
-    cmd = list(configure_args(config))
+    cmd = list(configure_args(config, single_config=single_config))
     print("Registering: cmake", *cmd)
     fp.register([fp.program("cmake"), *cmd])
     fp.register([fp.program("cmake3"), *cmd])
-- 
2.39.1

